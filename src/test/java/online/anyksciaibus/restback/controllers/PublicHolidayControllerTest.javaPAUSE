package online.anyksciaibus.restback.controllers;

import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;



import online.anyksciaibus.restback.entities.timeconstraints.PublicHoliday;
import online.anyksciaibus.restback.services.timeconstraints.PublicHolidayService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;

//@SpringBootTest
@WebMvcTest(PublicHolidayController.class)
@ExtendWith(SpringExtension.class)
class PublicHolidayControllerTest {


    private MockMvc mockMvc;

    @Mock
    private PublicHolidayService publicHolidayService;

    @InjectMocks
    private PublicHolidayController publicHolidayController;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
//        mockMvc = standaloneSetup(publicHolidayController).build();
        mockMvc = MockMvcBuilders.standaloneSetup(publicHolidayController).build();
    }

    @Test
    public void getAllHolidays() throws Exception{
        List<PublicHoliday> holidays = new ArrayList<>();
        holidays.add(new PublicHoliday("Svente", 2, 16));
        holidays.add(new PublicHoliday("Svente2", 3, 11));

        mockMvc.perform( get("/all"))
                .andExpect( status().isOk())
                .andExpect( content().contentType( MediaType.APPLICATION_JSON ))
                .andExpect( jsonPath("$", hasSize(2)));

        verify(PublicHolidayService, times(1));
    }
}